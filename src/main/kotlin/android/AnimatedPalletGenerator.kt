package org.example.android

import androidx.compose.animation.core.AnimationSpec
import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import androidx.compose.ui.graphics.Color as ComposeColor
import java.awt.Color
import java.io.File

fun generateAnimatePalletFile(
    outputFile: File,
    mode: VariableMode,
    palletName: String,
    packageName: String
) {
    val fileCode = FileSpec.builder(packageName, outputFile.nameWithoutExtension)
        .addAnimatedUtilFunction()
        .addFunction(generatePalletFunction(mode, packageName, palletName))
        .addImport("androidx.compose.animation.core", "tween")
        .addImport("androidx.compose.animation", "animateColorAsState")
        // Workaround for alias conflict bug
        .addAliasedImport(
            ClassName("$packageName.$palletName.Surface.Fade", "TransparentBlack"),
            "FadeTransparentBlack"
        )
        .addAliasedImport(
            ClassName("$packageName.$palletName.Surface.Fade", "TransparentWhite"),
            "FadeTransparentWhite"
        )
        .build()
        .toString()
    outputFile.writeText(fileCode)
}

private fun FileSpec.Builder.addAnimatedUtilFunction(): FileSpec.Builder {
    val durationSpec = PropertySpec.builder("ANIMATION_DURATION_MS", INT, KModifier.PRIVATE, KModifier.CONST)
        .initializer("750")
        .build()
    addProperty(durationSpec)
    val animationSpec = PropertySpec.builder(
        "animationSpec",
        AnimationSpec::class.parameterizedBy(ComposeColor::class),
        KModifier.PRIVATE
    ).initializer(
        CodeBlock.of(
            "%N(%N)",
            MemberName("androidx.compose.animation.core", "tween", isExtension = true),
            durationSpec
        )
    ).build()
    addProperty(animationSpec)
    val animateColorSpec = FunSpec.builder("animatedColor")
        .addModifiers(KModifier.PRIVATE)
        .addAnnotation(ClassName("androidx.compose.runtime", "Composable"))
        .addParameter(
            ParameterSpec.builder(
                name = "targetValue",
                type = ComposeColor::class
            ).build()
        ).returns(ComposeColor::class)
        .addCode(
            CodeBlock.of(
                "return %N(targetValue = targetValue, animationSpec = animationSpec).value",
                MemberName(
                    packageName = "androidx.compose.animation",
                    simpleName = "animateColorAsState",
                    isExtension = true
                )
            )
        )
        .build()
    addFunction(animateColorSpec)
    return this
}

private fun generatePalletFunction(mode: VariableMode, packageName: String, palletName: String): FunSpec {
    val mainBuilder = FunSpec.builder("toAnimatePallet")
        .addModifiers(KModifier.INTERNAL)
        .addAnnotation(AnnotationSpec.builder(ClassName("kotlin", "Suppress"))
            .addMember(CodeBlock.of("\"LongMethod\""))
            .build())
        .receiver(ClassName(packageName, palletName))
        .addAnnotation(ClassName("androidx.compose.runtime", "Composable"))
        .returns(ClassName(packageName, palletName))
        .addKdoc(CodeBlock.of("Autogenerated code from https://github.com/LionZXY/FlipperPalletGenerator/"))

    val codeBlock = CodeBlock.builder()

    codeBlock.add("return %T(\n⇥", ClassName(packageName, palletName))
    addCollectionToCodeBlock(
        codeBlock,
        mode.colors,
        "$packageName.$palletName",
        path = null
    )
    codeBlock.add("⇤)")

    return mainBuilder
        .addCode(codeBlock.build())
        .build()
}

private fun addTreeElementToCodeBlock(
    codeBlock: CodeBlock.Builder,
    name: String,
    treeElement: ColorTreeElement,
    packageName: String,
    path: String
) {
    when (treeElement) {
        is ColorTreeElement.Collection -> {
            codeBlock.add("%N = %T(\n⇥", name, ClassName(packageName, name.capitalize()))
            addCollectionToCodeBlock(
                codeBlock = codeBlock,
                element = treeElement,
                packageName = "$packageName.${name.capitalize()}",
                path = path
            )
            codeBlock.add("⇤)")
        }

        is ColorTreeElement.Color -> codeBlock.add(
            "$name = animatedColor($path)",
            ClassName("androidx.compose.ui.graphics", "Color")
        )
    }
}

private fun addCollectionToCodeBlock(
    codeBlock: CodeBlock.Builder,
    element: ColorTreeElement.Collection,
    packageName: String,
    path: String?
) {
    val entries = element.map.entries
    entries.forEachIndexed { index, (name, element) ->
        addTreeElementToCodeBlock(
            codeBlock,
            name,
            element,
            packageName,
            path = if (path == null) name else "$path.$name"
        )
        if (index != entries.size - 1) {
            codeBlock.add(",")
        }
        codeBlock.add("\n")
    }
}

private fun Color.toHexString(): String {
    return String.format("%02X%02X%02X%02X", alpha, red, green, blue);
}